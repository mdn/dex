# Instead of waiting for Dex to be published to npmjs.com and be upgraded
# inside mdn/content by Dependabot, we do all those steps here using `npm pack`.

name: NPM Publish simulation

on:
  pull_request:
    branches:
      - main

# No GITHUB_TOKEN permissions, as we only use it to increase API limit.
permissions: {}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: (mdn/dex) Checkout
        uses: actions/checkout@v5
        with:
          path: mdn/dex

      - name: (mdn/dex) Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: mdn/dex/.nvmrc
          cache: yarn
          cache-dependency-path: mdn/dex/yarn.lock

      - name: (mdn/dex) Install all yarn packages
        working-directory: mdn/dex
        run: yarn --frozen-lockfile
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup kernel for react native, increase watchers
        run: |
          # When running Dex on Linux, you might get the
          # "Error: ENOSPC: System limit for number of file watchers reached" error.
          # This, resolves that.
          # Source https://github.com/expo/expo-github-action/issues/20#issuecomment-541676895
          echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p

      - name: (mdn/dex) Prepare to build
        working-directory: mdn/dex
        env:
          # The following env vars is what we do in npm-publish.yml
          # Each variable set is documented there.

          REACT_APP_WRITER_MODE: true
          REACT_APP_DISABLE_AUTH: true
          CONTENT_ROOT: testing/content/files
        run: |
          yarn build:legacy:prepare

      - name: (mdn/content) Checkout
        uses: actions/checkout@v5
        with:
          repository: mdn/content
          path: mdn/content

      - name: (mdn/dex) Build tarball
        id: build
        working-directory: mdn/dex
        run: |
          npm pack
          TARBALL=`ls mdn-dex-*.tgz`
          echo $TARBALL
          ls -lh $TARBALL
          echo "tarball=$(realpath $TARBALL)" >> "$GITHUB_OUTPUT"

      - name: (mdn/content) Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: mdn/content/.nvmrc
          cache: yarn
          cache-dependency-path: mdn/content/yarn.lock

      - name: (mdn/content) Install tarball
        working-directory: mdn/content
        env:
          TARBALL: ${{ steps.build.outputs.tarball }}
        run: |
          yarn cache clean --all
          yarn add file:$TARBALL
          yarn install

      - name: (mdn/content) yarn dex-filecheck --help
        working-directory: mdn/content
        run: yarn dex-filecheck --help
